generator client {
  provider      = "prisma-client-js"
  binaryTargets = ["native", "linux-musl-openssl-3.0.x"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_PUBLIC_URL")
}

model SuperAdmin {
  super_admin_id Int       @id @default(autoincrement())
  admin_name     String
  admin_email    String    @unique
  admin_pin      String    @unique
  created_at     DateTime  @default(now())
  updated_at     DateTime  @updatedAt
  deleted_at     DateTime?
  password       String    @unique
}

model User {
  user_id      Int           @id @default(autoincrement())
  user_name    String        @unique
  email        String        @unique
  pin          String        @unique
  password     String
  created_at   DateTime      @default(now())
  updated_at   DateTime      @updatedAt
  deleted_at   DateTime?
  role         Role
  user_closing OpenClose[]   @relation("user_closed")
  user_opening OpenClose[]   @relation("user_open")
  store        Store[]
  store_staff  StoreStaff[]
  transactions Transaction[]
}

model Store {
  store_id           Int                  @id @default(autoincrement())
  user_id            Int
  store_name         String               @unique
  store_address      String               @unique
  created_at         DateTime             @default(now())
  updated_at         DateTime             @updatedAt
  deleted_at         DateTime?
  driver_partners    DriverPartner[]
  DriverPartnerStore DriverPartnerStore[]
  inventories        Inventory[]
  open_close         OpenClose[]
  payments           Payment[]
  products           Product[]
  productCategory    ProductCategory[]
  user               User                 @relation(fields: [user_id], references: [user_id])
  store_staff        StoreStaff[]
  StoreSupplier      StoreSupplier[]
  transactions       Transaction[]
}

model OpenClose {
  open_close_id   Int       @id @default(autoincrement())
  user_id         Int       
  store_id        Int
  is_cashier_open Boolean   @default(false)
  open_date       DateTime? @default(now())
  open_by         Int?
  close_date      DateTime? @default(now())
  close_by        Int?
  bill_quantity   Int
  created_at      DateTime  @default(now())
  updated_at      DateTime  @updatedAt
  deleted_at      DateTime?
  user_closed     User?     @relation("user_closed", fields: [close_by], references: [user_id])
  user_opened     User?     @relation("user_open", fields: [open_by], references: [user_id])
  store           Store     @relation(fields: [store_id], references: [store_id])

  @@unique([user_id, store_id, open_date, close_date])
}

model Tax {
  tax_id              Int           @id @default(autoincrement())
  tax_type            Tax_type
  tax_name            String        @unique
  tax_value           Int
  tax_status          Boolean       @default(false)
  created_at          DateTime      @default(now())
  updated_at          DateTime      @updatedAt
  deleted_at          DateTime?
  supplierSupplier_id Int?
  ProductTax          ProductTax[]
  SupplierTax         SupplierTax[]
  Supplier            Supplier?     @relation(fields: [supplierSupplier_id], references: [supplier_id])
  Transaction         Transaction[]
}

model ProductCategory {
  product_category_id Int       @id @default(autoincrement())
  store_id            Int
  category_name       String
  created_at          DateTime  @default(now())
  updated_at          DateTime  @updatedAt
  deleted_at          DateTime?
  store               Store     @relation(fields: [store_id], references: [store_id])
}

model Product {
  product_id          Int            @id @default(autoincrement())
  store_id            Int
  product_category_id Int
  product_name        String         @unique
  product_price       Int
  cost_of_good_sold   Int
  product_code        Int
  product_image       String?
  created_at          DateTime       @default(now())
  updated_at          DateTime       @updatedAt
  deleted_at          DateTime?
  inventories         Inventory[]
  stores              Store          @relation(fields: [store_id], references: [store_id])
  ProductPromo        ProductPromo[]
  ProductTax          ProductTax[]
  transaction         Transaction[]
}

model Inventory {
  inventory_id      Int                 @id @default(autoincrement())
  product_id        Int
  store_id          Int
  inventory_name    String
  in_storage_date   DateTime            @default(now())
  value_stored      Int
  value_out         Int
  out_storage_date  DateTime            @default(now())
  created_at        DateTime            @default(now())
  updated_at        DateTime            @updatedAt
  deleted_at        DateTime?
  product           Product             @relation(fields: [product_id], references: [product_id])
  store             Store               @relation(fields: [store_id], references: [store_id])
  InventorySupplier InventorySupplier[]

  @@unique([product_id, store_id])
}

model Supplier {
  supplier_id       Int                 @id @unique @default(autoincrement())
  supplier_name     String
  supplier_product  String
  phone_number      String
  email             String              @unique
  created_at        DateTime            @default(now())
  updated_at        DateTime            @updatedAt
  deleted_at        DateTime?
  InventorySupplier InventorySupplier[]
  StoreSupplier     StoreSupplier[]
  SupplierTax       SupplierTax[]
  Taxes             Tax[]
}

model DriverPartner {
  driver_partner_id  Int                  @id @default(autoincrement())
  store_id           Int
  partner_name       String               @unique
  benefit            Float
  created_at         DateTime             @default(now())
  updated_at         DateTime             @updatedAt
  deleted_at         DateTime?
  stores             Store                @relation(fields: [store_id], references: [store_id])
  DriverPartnerStore DriverPartnerStore[]
  orders             Transaction[]

  @@unique([store_id, partner_name])
}

model Payment {
  payment_id   Int          @id @default(autoincrement())
  store_id     Int?
  payment_name String
  payment_type Payment_type
  created_at   DateTime     @default(now())
  updated_at   DateTime     @updatedAt
  deleted_at   DateTime?
  store        Store?        @relation(fields: [store_id], references: [store_id])
}

model Transaction {
  transaction_id   Int                @id @default(autoincrement())
  store_id         Int
  user_id          Int
  product_id       Int
  tax_id           Int
  order_type       Order_type
  driver_partner   String?
  receipt_number   String             @unique
  quantity         Int
  sub_total        Float
  grand_total      Float
  payment_type     Order_payment_type
  change           Int
  customer_name    String
  whatsapp_number  String

  created_at       DateTime           @default(now())
  updated_at       DateTime           @updatedAt
  deleted_at       DateTime?

  partner          DriverPartner?      @relation(fields: [driver_partner], references: [partner_name])
  selected_product Product            @relation(fields: [product_id], references: [product_id])
  store            Store              @relation(fields: [store_id], references: [store_id])
  taxes            Tax                @relation(fields: [tax_id], references: [tax_id])
  user             User               @relation(fields: [user_id], references: [user_id])

  @@unique([store_id, user_id, driver_partner])
}


model Promo {
  promo_id     Int            @id @default(autoincrement())
  product_id   Int?
  promo_type   Promo_type
  promo_value  Int
  start_date   DateTime       @default(now())
  end_date     DateTime       @default(now())
  created_at   DateTime       @default(now())
  updated_at   DateTime       @updatedAt
  deleted_at   DateTime?
  promo_name   String
  ProductPromo ProductPromo[]
}

model ProductPromo {
  product_id Int
  promo_id   Int
  id         Int     @id @default(autoincrement())
  product    Product @relation(fields: [product_id], references: [product_id])
  promo      Promo   @relation(fields: [promo_id], references: [promo_id])

  @@unique([product_id, promo_id])
}

model ProductTax {
  product_id     Int
  tax_id         Int
  product_tax_id Int     @id @default(autoincrement())
  product        Product @relation(fields: [product_id], references: [product_id])
  tax            Tax     @relation(fields: [tax_id], references: [tax_id])

  @@unique([product_id, tax_id])
}

model DriverPartnerStore {
  driver_partner_id Int
  store_id          Int
  driver_partner    DriverPartner @relation(fields: [driver_partner_id], references: [driver_partner_id])
  store             Store         @relation(fields: [store_id], references: [store_id])

  @@id([driver_partner_id, store_id])
}

model StoreSupplier {
  store_id    Int
  supplier_id Int
  store       Store    @relation(fields: [store_id], references: [store_id])
  supplier    Supplier @relation(fields: [supplier_id], references: [supplier_id])

  @@id([store_id, supplier_id])
}

model InventorySupplier {
  inventory_id Int
  supplier_id  Int
  inventory    Inventory @relation(fields: [inventory_id], references: [inventory_id])
  supplier     Supplier  @relation(fields: [supplier_id], references: [supplier_id])

  @@id([inventory_id, supplier_id])
}

model SupplierTax {
  supplier_id Int
  tax_id      Int
  supplier    Supplier @relation(fields: [supplier_id], references: [supplier_id])
  tax         Tax      @relation(fields: [tax_id], references: [tax_id])

  @@id([supplier_id, tax_id])
}

model StoreStaff {
  store_staff_id Int       @id @default(autoincrement())
  store_id       Int
  user_id        Int
  role           String
  created_at     DateTime  @default(now())
  updated_at     DateTime  @updatedAt
  deleted_at     DateTime?
  store          Store     @relation(fields: [store_id], references: [store_id])
  user           User      @relation(fields: [user_id], references: [user_id])
}

enum Role {
  SUPER_ADMIN
  OWNER
  STAFF
}

enum Tax_type {
  Service
  VAT
}

enum Payment_type {
  Transfer
  EPayment
  Cash
}

enum Order_type {
  Order
  TakeAway
}

enum Order_payment_type {
  Cash
  Bank_Transfer
  EPayment      @map("E-Payment")
}

enum Promo_type {
  Discount
  Sales
}