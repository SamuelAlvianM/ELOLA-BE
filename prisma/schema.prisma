generator client {
    provider = "prisma-client-js"
    binaryTargets = ["native", "linux-musl-openssl-3.0.x"]
}

datasource db {
    provider = "postgresql"
    url = env("DATABASE_URL")
}


model User {

    user_id     Int         @id @default(autoincrement()) 
    user_name   String      @unique
    email       String      @unique
    pin         String      
    password    String  
    created_at  DateTime    @default(now())
    updated_at  DateTime    @updatedAt
    deleted_at  DateTime?   @deletedAt

    store       Store[]
    open-close  Open-Close[]
    orders      Orders[]

}


model Store {

    store_id        Int         @id @default(autoincrement())
    user_id         Int
    store_name      String      @unique  
    store_address   String      @unique
    created_at      DateTime    @default(now())
    updated_at      DateTime    @updatedAt
    deleted_at      DateTime?   @deletedAt

    payments        Payment[]
    transactions    Transaction[]
    orders          Orders[]


    user    User @relation(fields: [user_id], references: [user_id])

}


model Open-Close {
    open_close_id       Int @id @default(autoincrement())
    user_id             Int @unique 
    is_cashier_open     Boolean @default(false)

    open_date           DateTime @default(now())
    open_by             User @relation(fields: [open_by], references: [user_id])

    close_date          DateTime @default(now())
    close_by            User @relation(fields: [close_by], references: [user_id])

    bill_quantity       Int

    created_at          DateTime @default(now())
    updated_at          DateTime @updatedAt
    deleted_at          DateTime? @deletedAt

    @@unique            ([user_id])
}


enum Tax_type {

    Service
    Value-Added Tax
}

model Tax {
    tax_id      Int  @id @default(autoincrement())
    tax_type    Tax_type
    tax_name    String
    tax_value   Int
    tax_status  Boolean @default(false)
    created_at  DateTime @default(now())
    updated_at  DateTime @updatedAt
    deleted_at  DateTime? @deletedAt

    orders      Orders[]
}

model Product {
    product_id  Int @id @default(autoincrement())
    store_id    Int

    
    
    
    
    
    store_id    Store   @relation(fields: [store_id], references: [store_id])

    @@unique    ([store_id])
}



model Driver-Partner {

    driver_partner_id Int @id @default(autoincrement())
    store_id          Int
    tax_id            Int
    partner_name      String @unique
    benefit           double precision
    created_at        DateTime @default(now())
    updated_at        DateTime @updatedAt
    deleted_at        DateTime? @deletedAt

    orders            Orders[]

}



enum Payment_type {
    Bank
    E-Payment
}


model Payment {

    payment_id      Int @id @default(autoincrement())
    store_id        Int 
    payment_name    String @unique
    payment_type    Payment_type
    created_at      DateTime @default(now())
    updated_at      DateTime @updatedAt
    deleted_at      DateTime? @deletedAt


    store       Store   @relation(fields: [store_id], references: [store_id])

    @@unique ([store_id])
}





enum Order_type {
    Retail
    Take_away
}

enum Order_payment_type {

    Cash
    Bank Transfer
    E-Payment

}

model Orders {

    order_id        Int @id @default(uuid())
    store_id        Int
    user_id         String
    order_type      Order_type
    driver_partner  String
    receipt_number  Int @id @default(uuid())
    sub_total       double precision
    service         double precision
    tax             double precision
    discount        double precision
    rounding        Int
    grand_total     Int
    c_o_g_s         double precision
    payment_type    Order_payment_type
    change          Int
    created_at      DateTime @default(now())
    updated_at      DateTime @updatedAt
    deleted_at      DateTime? @deletedAt



    store    Store          @relation(fields: [store_id], references: [store_id])
    user     User           @relation(fields: [user_id], references: [user_id])
    partner  Driver-Partner @relation(fields: [driver_partner], references: [partner_name])

    @@unique ([store_id, user_id, driver_partner_id])

}