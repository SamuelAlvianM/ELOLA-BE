generator client {
    provider = "prisma-client-js"
    binaryTargets = ["native", "linux-musl-openssl-3.0.x"]
}

datasource db {
    provider = "postgresql"
    url = env("DATABASE_URL")
}


enum Role {

    SUPER_ADMIN
    OWNER 
    STAFF 
}



model SuperAdmin {

    super_admin_id Int @id @default(autoincrement())
    admin_name  String
    admin_email String @unique
    password    String @unique
    admin_pin   String @unique
    created_at  DateTime @default(now())
    updated_at  DateTime @updatedAt
    deleted_at  DateTime?

}


model User {
    user_id        Int         @id @default(autoincrement()) 
    user_name      String      @unique
    email          String      @unique
    pin            String      @unique
    password       String  
    role           Role      
    created_at     DateTime    @default(now())
    updated_at     DateTime    @updatedAt
    deleted_at     DateTime?

    store          Store[]
    user_opening   OpenClose[] @relation(name: "user_open")
    user_closing   OpenClose[] @relation(name: "user_closed")
    transactions   Transaction[]
    store_staff    StoreStaff[]
}

model Store {
    store_id            Int             @id @default(autoincrement())
    user_id             Int
    store_name          String          @unique  
    store_address       String          @unique
    
    created_at          DateTime        @default(now())
    updated_at          DateTime        @updatedAt
    deleted_at          DateTime?   

    payments            Payment[]
    transactions        Transaction[]
    open_close          OpenClose[]
    products            Product[]
    productCategory     ProductCategory[]
    inventories         Inventory[]
<<<<<<< HEAD
<<<<<<< HEAD
    // suppliers           Supplier[]    
    partners            DriverPartner[] 
=======
    // suppliers           Supplier[]
    store_staff         StoreStaff[]
    driver_partners    DriverPartner[]
>>>>>>> 5f6a9113152f90af120ff0640690db7885a77efe
=======
    // suppliers           Supplier[]
    store_staff         StoreStaff[]
    driver_partners    DriverPartner[]
>>>>>>> fc000bb92cb484ed5226ebe50e02084f88fcc4cc

    user                User            @relation(fields: [user_id], references: [user_id])

    StoreSupplier StoreSupplier[]
}

model OpenClose {
    open_close_id       Int         @id @default(autoincrement())
    user_id             Int         @unique 
    store_id            Int 
    is_cashier_open     Boolean     @default(false)

    open_date           DateTime    @default(now())
    open_by             Int

    close_date          DateTime    @default(now())
    close_by            Int

    bill_quantity       Int

    created_at          DateTime    @default(now())
    updated_at          DateTime    @updatedAt
    deleted_at          DateTime? 

    user_opened         User        @relation(name: "user_open", fields: [open_by], references: [user_id])  
    user_closed         User        @relation(name: "user_closed", fields: [close_by], references: [user_id])
    store               Store       @relation(fields: [store_id], references: [store_id])

    @@unique            ([user_id, store_id])
}

enum Tax_type {
    Service
    VAT //Value-Added Tax
}

model Tax {
    tax_id                  Int             @id @default(autoincrement())
    product_id              Int
    productPackage_id       Int
    tax_type                Tax_type
    tax_name                String
    tax_value               Int
    tax_status              Boolean         @default(false)

    created_at              DateTime        @default(now())
    updated_at              DateTime        @updatedAt
    deleted_at              DateTime? 

    // productPackage          ProductPackage[]
    // product                 Product[]
    // suppliers               Supplier[]

    @@unique ([productPackage_id, product_id])
    ProductPackageTax ProductPackageTax[]
    ProductTax ProductTax[]
    SupplierTax SupplierTax[]
}

model ProductCategory {
    product_category_id     Int             @id @default(autoincrement())
    store_id                Int
    category_name           String

    created_at              DateTime        @default(now())
    updated_at              DateTime        @updatedAt
    deleted_at              DateTime?

    store                   Store           @relation(fields: [store_id], references: [store_id])
    @@unique([store_id])
}

model Product {
    product_id              Int             @id @default(autoincrement())
    store_id                Int
    product_category_id     Int
    product_name            String
    product_price           Int
    cost_of_good_sold       Int
    product_code            Int
    product_image           String?
    created_at              DateTime        @default(now())
    updated_at              DateTime        @updatedAt
    deleted_at              DateTime?

    store                   Store           @relation(fields: [store_id], references: [store_id])
    productpackages         ProductPackage[]
    promos                  Promo[]
    inventories             Inventory[]  
    // taxes                   Tax[]   

    @@unique                ([store_id, product_category_id])
    ProductTax ProductTax[]

}

model ProductPackage {
    productPackage_id       Int             @id @default(autoincrement())
    product_id              Int
    package_name            String
    package_price           Int
    cost_of_good_sold       Int

    created_at              DateTime        @default(now())
    updated_at              DateTime        @updatedAt
    deleted_at              DateTime?

    product                 Product         @relation(fields: [product_id], references: [product_id])
    // taxes                   Tax[]

    @@unique([product_id])
    ProductPackageTax ProductPackageTax[]
}

model Inventory {
    inventory_id        Int         @id @default(autoincrement())
    product_id          Int
    store_id            Int
    inventory_name      String
    in_storage_date     DateTime    @default(now())
    value_stored        Int
    value_out           Int
    out_storage_date    DateTime    @default(now())
    created_at          DateTime    @default(now())
    updated_at          DateTime    @updatedAt
    deleted_at          DateTime?

    product             Product     @relation(fields: [product_id], references: [product_id])
    store               Store       @relation(fields: [store_id], references: [store_id])
    // suppliers           Supplier[]


    @@unique([product_id, store_id])
    InventorySupplier InventorySupplier[]
}

model Supplier {
    supplier_id         Int             @id @default(autoincrement())
    // store_id            Int
    // inventory_id        Int
    // tax_id              Int

    supplier_name       String
    supplier_product    String
    phone_number        Int
    email               String          @unique
    created_at          DateTime        @default(now())
    updated_at          DateTime        @updatedAt
    deleted_at          DateTime?
    
    // store               Store[]
    // inventories         Inventory[]
    // taxes               Tax[]

    @@unique ([ supplier_id])
    InventorySupplier InventorySupplier[]
    StoreSupplier StoreSupplier[]
    SupplierTax SupplierTax[]
}

model DriverPartner {
    driver_partner_id   Int         @id @default(autoincrement())
    store_id            Int
    tax_id              Int
    partner_name        String      @unique
    benefit             Float

    created_at          DateTime    @default(now())
    updated_at          DateTime    @updatedAt
    deleted_at          DateTime?

    orders              Transaction[]
    store               Store[]

    @@unique([store_id])
}

enum Payment_type {
    Bank
    EPayment @map("E-Payment")
}

model Payment {
    payment_id          Int         @id @default(autoincrement())
    store_id            Int 
    payment_name        String      @unique
    payment_type        Payment_type

    created_at          DateTime    @default(now())
    updated_at          DateTime    @updatedAt
    deleted_at          DateTime? 

    store               Store       @relation(fields: [store_id], references: [store_id])

    @@unique ([store_id])
}

enum Order_type {
    Retail
    Take_away
}

enum Order_payment_type {
    Cash
    Bank_Transfer
    EPayment @map("E-Payment")
}

model Transaction {
    transaction_id      String          @id @default(uuid())
    store_id            Int
    user_id             Int
    order_type          Order_type
    driver_partner      String
    receipt_number      Int             @default(autoincrement())
    sub_total           Float
    service             Float
    tax                 Float
    discount            Float
    rounding            Int
    grand_total         Int
    c_o_g_s             Float
    payment_type        Order_payment_type
    change              Int

    created_at          DateTime        @default(now())
    updated_at          DateTime        @updatedAt
    deleted_at          DateTime?

    store               Store           @relation(fields: [store_id], references: [store_id])
    user                User            @relation(fields: [user_id], references: [user_id])
    partner             DriverPartner   @relation(fields: [driver_partner], references: [partner_name])

    @@unique ([store_id, user_id, driver_partner])
}

enum Promo_type {
    Discount // reducing the price of products/service for limited time
    Sales   //offering product at reduce prices for a predetermined period (seasonal sales/clerance sale/special occasion)
}

model Promo {
    promo_id            Int         @id @default(autoincrement())
    product_id          Int
    promo_type          Promo_type
    promo_value         Int
    start_date          DateTime    @default(now())
    end_date            DateTime    @default(now())
    
    created_at          DateTime    @default(now())
    updated_at          DateTime    @updatedAt
    deleted_at          DateTime?

    product             Product     @relation(fields: [product_id], references: [product_id])

    @@unique([product_id])
}

model ProductTax {
    product_id  Int
    tax_id      Int
    product     Product @relation(fields: [product_id], references: [product_id])
    tax         Tax     @relation(fields: [tax_id], references: [tax_id])

    @@id([product_id, tax_id])
}

model ProductPackageTax {
    productPackage_id   Int
    tax_id              Int
    productPackage      ProductPackage @relation(fields: [productPackage_id], references: [productPackage_id])
    tax                 Tax             @relation(fields: [tax_id], references: [tax_id])

    @@id([productPackage_id, tax_id])
}

model StoreSupplier {
    store_id    Int
    supplier_id Int
    store       Store    @relation(fields: [store_id], references: [store_id])
    supplier    Supplier @relation(fields: [supplier_id], references: [supplier_id])

    @@id([store_id, supplier_id])
}

model InventorySupplier {
    inventory_id    Int
    supplier_id     Int
    inventory       Inventory @relation(fields: [inventory_id], references: [inventory_id])
    supplier        Supplier  @relation(fields: [supplier_id], references: [supplier_id])

    @@id([inventory_id, supplier_id])
}

model SupplierTax {
    supplier_id Int
    tax_id      Int
    supplier    Supplier @relation(fields: [supplier_id], references: [supplier_id])
    tax         Tax      @relation(fields: [tax_id], references: [tax_id])

    @@id([supplier_id, tax_id])
}

model StoreStaff { 
    store_staff_id  Int @id @default(autoincrement())
    store_id        Int
    user_id         Int
    role            String

    store Store @relation(fields: [store_id], references: [store_id])
    user  User  @relation(fields: [user_id], references: [user_id])

    created_at DateTime @default(now())
    updated_at DateTime @updatedAt
    deleted_at DateTime?

}