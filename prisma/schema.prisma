generator client {
  provider      = "prisma-client-js"
  binaryTargets = ["native", "linux-musl-openssl-3.0.x"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_PUBLIC_URL")
}

model super_admin {
  super_admin_id Int       @id @default(autoincrement())
  role           String    @default("super_admin")
  admin_email    String    @unique @db.VarChar(50)
  admin_name     String    @db.VarChar(50)
  admin_pin      String    @unique 
  password       String    @unique 
  created_at     DateTime  @default(now())
  updated_at     DateTime  @updatedAt
  deleted_at     DateTime?
  is_deleted     Boolean   @default(false)
}

model user {
  user_id      String         @id @default(uuid())
  user_name    String         @unique  @db.VarChar(50)
  email        String         @unique  @db.VarChar(100)
  pin          String         @unique  
  password     String        
  role         has_role
  class        hierarchy
  created_at   DateTime       @default(now())
  updated_at   DateTime       @updatedAt
  deleted_at   DateTime?
  is_deleted   Boolean        @default(false)
  open_closes  open_close[]
  company      company?       @relation(fields: [company_id], references: [company_id])
  company_id   String?
  outlet       outlet?        @relation(fields: [outlet_id], references: [outlet_id])
  outlet_id    String?
  branches     branch?        @relation(fields: [branch_id], references: [branch_id])  
  branch_id    String?
  order        order[]
}

model company {
  company_id        String    @id @default(uuid())
  company_name      String    @unique @db.VarChar(50)
  company_owner     String    @db.VarChar(30)
  company_address   String    @db.Text
  company_email     String    @db.VarChar(50)
  company_phone     String    @db.VarChar(30)
  created_at        DateTime  @default(now())
  updated_at        DateTime  @updatedAt
  deleted_at        DateTime?
  is_deleted        Boolean   @default(false)
  users             user[]
  branches          branch[]
  outlets           outlet[]
  open_close        open_close[]
}

model branch {
  branch_id       String    @id @default(uuid())
  branch_name     String    @unique @db.VarChar(50)
  branch_address  String    @db.Text
  branch_email    String    @db.VarChar(50)
  branch_phone    String    @db.VarChar(30)
  branch_area     String    @db.Text
  created_at      DateTime  @default(now())
  updated_at      DateTime  @updatedAt
  deleted_at      DateTime?
  is_deleted      Boolean   @default(false)
  company         company?   @relation(fields: [company_id], references: [company_id])
  company_id      String?
  outlets         outlet[]
  open_close      open_close[]
  users           user[]
}

model outlet {
  outlet_id       String    @id @default(uuid())
  outlet_name     String    @unique @db.VarChar(50)
  outlet_address  String    @db.Text
  outlet_email    String    @db.VarChar(50)
  outlet_phone    String    @db.VarChar(30)
  outlet_area     String    @db.Text
  created_at      DateTime  @default(now())
  updated_at      DateTime  @updatedAt
  deleted_at      DateTime?
  is_deleted      Boolean   @default(false)
  company         company?   @relation(fields: [company_id], references: [company_id])
  company_id      String?
  branch          branch?    @relation(fields: [branch_id], references: [branch_id])
  branch_id       String?
  users                   user[]
  open_closes             open_close[]
  driver_partners         driver_partner[]
  driver_partner_outlet   driver_partner_outlet[]
  inventories             inventory[]
  payments                payment[]
  products                product[]
  product_categories      product_category[]
  outlet_suppliers        outlet_supplier[]
  orders                  order[]
}

model open_close {
  open_close_id     Int       @id @default(autoincrement())
  is_cashier_open   Boolean   @default(false)
  start_time        DateTime? @default(now())
  end_time          DateTime? @default(now())
  bill_quantity     Int
  created_at        DateTime  @default(now())
  updated_at        DateTime  @updatedAt
  deleted_at        DateTime?
  is_deleted        Boolean   @default(false)

  user            user?     @relation(fields: [user_id], references: [user_id])
  user_id         String?
  company         company?  @relation(fields: [company_id], references: [company_id])
  company_id      String?
  branch          branch?   @relation(fields: [branch_id], references: [branch_id])
  branch_id       String?
  outlet          outlet?   @relation(fields: [outlet_id], references: [outlet_id])
  outlet_id       String?

  @@unique([user_id, company_id, branch_id, outlet_id, start_time, end_time])
}

model tax {
  tax_id              Int           @id @default(autoincrement())
  tax_type            tax_type
  tax_name            String        @unique
  tax_value           Int?
  service_value       Int?           @default(0)
  tax_status          Boolean       @default(false)
  created_at          DateTime      @default(now())
  updated_at          DateTime      @updatedAt
  deleted_at          DateTime?
  supplier_supplier_id Int?
  product_tax         product_tax[]
  supplier_tax        supplier_tax[]
  orders              order[]
  supplier            supplier?     @relation(fields: [supplier_supplier_id], references: [supplier_id])
}

model product_category {
  product_category_id Int       @id @default(autoincrement())
  outlet_id           String
  category_name       String
  created_at          DateTime  @default(now())
  updated_at          DateTime  @updatedAt
  deleted_at          DateTime?
  outlet              outlet     @relation(fields: [outlet_id], references: [outlet_id])
  product             product[]
}

model inventory {
  inventory_id      Int                 @id @default(autoincrement())
  product_id        String
  outlet_id         String
  inventory_name    String
  in_storage_date   DateTime            @default(now())
  value_in          Int?
  value_out         Int?
  out_storage_date  DateTime            @default(now())
  created_at        DateTime            @default(now())
  updated_at        DateTime            @updatedAt
  deleted_at        DateTime?
  product           product             @relation(fields: [product_id], references: [product_id])
  outlet            outlet               @relation(fields: [outlet_id], references: [outlet_id])
  inventory_supply  inventory_supplier[]

  @@unique([product_id, outlet_id])
}

model supplier {
  supplier_id       Int                 @id @unique @default(autoincrement())
  supplier_name     String
  supplier_product  String
  phone_number      String
  email             String              @unique
  created_at        DateTime            @default(now())
  updated_at        DateTime            @updatedAt
  deleted_at        DateTime?
  inventory_supply inventory_supplier[]
  outlet_supply      outlet_supplier[]
  supplier_tax       supplier_tax[]
  taxes              tax[]
}

model driver_partner {
  driver_partner_id  Int                  @id @default(autoincrement())
  outlet_id             String
  partner_name          String               @unique
  benefit               Float
  created_at            DateTime             @default(now())
  updated_at            DateTime             @updatedAt
  deleted_at            DateTime?
  outlets                outlet                @relation(fields: [outlet_id], references: [outlet_id])
  driver_partner_outlet  driver_partner_outlet[]
  orders                order[]

  @@unique([outlet_id, partner_name])
}

model payment {
  payment_id   Int          @id @default(autoincrement())
  outlet_id    String?
  payment_name String
  payment_type payment_type
  created_at   DateTime     @default(now())
  updated_at   DateTime     @updatedAt
  deleted_at   DateTime?
  outlet       outlet?       @relation(fields: [outlet_id], references: [outlet_id])
}

model product {
  product_id          String         @id @default(uuid())
  outlet_id           String
  product_category_id Int
  product_name        String         @unique
  product_price       Int
  cost_of_good_sold   Int
  product_code        Int
  product_image       String?
  created_at          DateTime       @default(now())
  updated_at          DateTime       @updatedAt
  deleted_at          DateTime?

  product_category    product_category @relation(fields: [product_category_id], references: [product_category_id])
  outlet              outlet           @relation(fields: [outlet_id], references: [outlet_id])
  inventories         inventory[]
  product_promos      product_promo[]
  product_taxes       product_tax[]
  order_products      order_product[]
}

model order_product {
  order_product_id      Int       @id @default(autoincrement())
  order_id       String
  product_id     String
  quantity       Int
  saved_order_id Int?
  
  orders         order         @relation(fields: [order_id], references: [order_id])
  product        product      @relation(fields: [product_id], references: [product_id])
  saved_order    saved_order? @relation(fields: [saved_order_id], references: [saved_order_id])
  
  @@unique([order_id, product_id])
}

model order {
  order_id         String                @id @default(uuid())
  outlet_id        String
  user_id          String
  tax_id           Int
  driver_partner   String?
  order_type       order_type
  receipt_number   String             @unique
  quantity         Int
  change           Int?
  sub_total        Float
  grand_total      Float
  payment_type     order_payment_type
  customer_name    String
  whatsapp_number  String

  created_at       DateTime           @default(now())
  updated_at       DateTime           @updatedAt
  deleted_at       DateTime?

  outlet           outlet              @relation(fields: [outlet_id], references: [outlet_id])
  user             user               @relation(fields: [user_id], references: [user_id])
  taxes            tax                @relation(fields: [tax_id], references: [tax_id])
  partner          driver_partner?    @relation(fields: [driver_partner], references: [partner_name])
  order_products   order_product[]
  saved_orders     saved_order[]
}

model promo {
  promo_id     Int            @id @default(autoincrement())
  product_id   String?
  promo_type   promo_type
  promo_value  Int
  start_date   DateTime       @default(now())
  end_date     DateTime       @default(now())
  created_at   DateTime       @default(now())
  updated_at   DateTime       @updatedAt
  deleted_at   DateTime?
  promo_name   String
  product_promo product_promo[]
}

model product_promo {
  product_id String
  promo_id   Int
  id         Int     @id @default(autoincrement())
  product    product @relation(fields: [product_id], references: [product_id])
  promo      promo   @relation(fields: [promo_id], references: [promo_id])

  @@unique([product_id, promo_id])
}

model product_tax {
  product_id     String
  tax_id         Int
  product_tax_id Int     @id @default(autoincrement())
  product        product @relation(fields: [product_id], references: [product_id])
  tax            tax     @relation(fields: [tax_id], references: [tax_id])

  @@unique([product_id, tax_id])
}


model driver_partner_outlet{
  driver_partner_id  Int
  outlet_id          String
  driver_partners   driver_partner @relation(fields: [driver_partner_id], references: [driver_partner_id])
  outlet             outlet         @relation(fields: [outlet_id], references: [outlet_id])

  @@id([driver_partner_id, outlet_id])
}

model outlet_supplier {
  outlet_id    String
  supplier_id  Int
  outlet       outlet    @relation(fields: [outlet_id], references: [outlet_id])
  supplier    supplier @relation(fields: [supplier_id], references: [supplier_id])

  @@id([outlet_id, supplier_id])
}

model inventory_supplier {
  inventory_id Int
  supplier_id  Int
  inventory    inventory @relation(fields: [inventory_id], references: [inventory_id])
  supplier     supplier  @relation(fields: [supplier_id], references: [supplier_id])

  @@id([inventory_id, supplier_id])
}

model supplier_tax {
  supplier_id Int
  tax_id      Int
  supplier    supplier @relation(fields: [supplier_id], references: [supplier_id])
  tax         tax      @relation(fields: [tax_id], references: [tax_id])

  @@id([supplier_id, tax_id])
}

model saved_order {
  saved_order_id    Int          @id @default(autoincrement())
  order_id          String?
  is_done           Boolean?      @default(false)
  status            String        

  created_at        DateTime     @default(now())
  updated_at        DateTime     @updatedAt
  deleted_at        DateTime?

  orders           order? @relation(fields: [order_id], references: [order_id])
  order_products  order_product[]  
}


enum has_role {
  owner
  hr
  head
  manager
  spv
  staff
  cashier
  waiter
}

enum hierarchy {
  company
  branch
  outlet
}

enum tax_type {
  service
  vat
}

enum payment_type {
  bank_transfer
  e_payment
  cash
}

enum order_type {
  order
  take_away
}

enum order_payment_type {
  cash
  bank_transfer
  e_payment 
}

enum promo_type {
  discount
  sales
}
